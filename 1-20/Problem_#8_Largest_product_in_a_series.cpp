#include <iostream>
using namespace std;

const int MAX = 1000;
const int CNT = 5;

const char NUM[MAX+1] = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

int charToInt(char ch) {
	switch (ch) {
	case '0': return 0;
	case '1': return 1;
	case '2': return 2;
	case '3': return 3;
	case '4': return 4;
	case '5': return 5;
	case '6': return 6;
	case '7': return 7;
	case '8': return 8;
	case '9': return 9;
	default: return -1;
	}
	return -1;
}

// Solution 1: recursive function

int multiply(int seed, int count) {
	return count ? charToInt(NUM[seed + count]) * multiply(seed, count - 1) : charToInt(NUM[seed]);
}

int main(void) {
	int max = 0;
	for (int i = 0; i < MAX - (CNT - 1); i++) {
		int result = multiply(i, CNT - 1);
		if (result > max) max = result;
	}
	cout << max << endl;
}

// Solution 2: for loop

int main(void) {
	int max = 0;
	for (int i = 0; i < MAX - (CNT - 1); i++) {
		int result = 1;
		for (int k = 0; k < CNT; k++) {
			int num = charToInt(NUM[i + k]);
			if (num == 0) {
				result = 0; // skip multiplying by 0
				break;
			}
			result *= num;
		}
		if (result > max) max = result;
	}
	cout << max << endl;
}
